-- SECTION A
-- QUESTION A

COLUMN BOOK_ISBN FORMAT A11 HEADING "BOOK ISBN";
COLUMN BOOK_TITLE FORMAT A35 HEADING "BOOK TITLE";
COLUMN BOOK_PUBDATE FORMAT A17 HEADING "BOOK PUBLISH DATE";
COLUMN BOOK_PUBID FORMAT A15 HEADING "BOOK PUBLISH ID";
COLUMN BOOK_COST FORMAT A9 HEADING "BOOK COST";
COLUMN BOOK_RETAIL FORMAT A11 HEADING "BOOK RETAIL";
COLUMN BOOK_CATEGORY FORMAT A14 HEADING "BOOK CATERGORY";

SELECT BOOK_ISBN, 
    BOOK_TITLE, 
    BOOK_PUBDATE,
    BOOK_PUBID,
    BOOK_COST,
    BOOK_RETAIL,
    BOOK_CATEGORY
FROM BOOK 
WHERE BOOK_RETAIL - BOOK_COST >= 16
ORDER BY BOOK_RETAIL - BOOK_COST DESC;

-- QUESTION B

COLUMN B.BOOK_ISBN FORMAT A11 HEADING "BOOK ISBN";
COLUMN B.BOOK_TITLE FORMAT A30 HEADING "BOOK TITLE";
COLUMN B.BOOK_PUBDATE FORMAT A17 HEADING "BOOK PUBLISH DATE";
COLUMN B.BOOK_PUBID FORMAT A15 HEADING "BOOK PUBLISH ID";
COLUMN B.BOOK_COST FORMAT A9 HEADING "BOOK COST";
COLUMN B.BOOK_RETAIL FORMAT A11 HEADING "BOOK RETAIL";
COLUMN B.BOOK_CATEGORY FORMAT A14 HEADING "BOOK CATERGORY";
COLUMN BA.BA_AUTHORID FORMAT A9 HEADING "AUTHOR ID";
COLUMN FULL_NAME FORMAT A17 HEADING "AUTHOR FULL NAME";

SELECT B.BOOK_ISBN, 
    B.BOOK_TITLE, 
    B.BOOK_PUBDATE,
    B.BOOK_PUBID,
    B.BOOK_COST,
    B.BOOK_RETAIL,
    B.BOOK_CATEGORY,
    BA.BA_AUTHORID,
    A.AUTHOR_FNAME || ', ' || A.AUTHOR_LNAME AS "FULL_NAME"
FROM BOOK B JOIN BOOKAUTHOR BA
ON B.BOOK_ISBN = BA.BA_ISBN
JOIN AUTHOR A ON BA.BA_AUTHORID = A.AUTHOR_ID
WHERE UPPER(B.BOOK_CATEGORY) = 'COMPUTER'
ORDER BY A.AUTHOR_LNAME;

-- QUESTION C

COLUMN B.BOOK_ISBN FORMAT A11 HEADING "BOOK ISBN";
COLUMN B.BOOK_TITLE FORMAT A30 HEADING "BOOK TITLE";
COLUMN B.BOOK_PUBDATE FORMAT A17 HEADING "BOOK PUBLISH DATE";
COLUMN B.BOOK_PUBID FORMAT A15 HEADING "BOOK PUBLISH ID";
COLUMN B.BOOK_COST FORMAT A9 HEADING "BOOK COST";
COLUMN B.BOOK_RETAIL FORMAT A11 HEADING "BOOK RETAIL";
COLUMN B.BOOK_CATEGORY FORMAT A14 HEADING "BOOK CATERGORY";
COLUMN BA.BA_AUTHORID FORMAT A9 HEADING "AUTHOR ID";
COLUMN FULL_NAME FORMAT A17 HEADING "AUTHOR FULL NAME";

SELECT B.BOOK_ISBN, 
    B.BOOK_TITLE, 
    B.BOOK_PUBDATE,
    EXTRACT (YEAR FROM B.BOOK_PUBDATE) AS "PUBLICATION YEAR",
    B.BOOK_PUBID,
    B.BOOK_COST,
    B.BOOK_RETAIL,
    B.BOOK_CATEGORY,
    BA.BA_AUTHORID,
    A.AUTHOR_FNAME || ', ' || A.AUTHOR_LNAME AS "FULL_NAME"
FROM BOOK B JOIN BOOKAUTHOR BA
ON B.BOOK_ISBN = BA.BA_ISBN
JOIN AUTHOR A ON BA.BA_AUTHORID = A.AUTHOR_ID
WHERE B.BOOK_RETAIL >= 21
AND B.BOOK_PUBDATE BETWEEN '01-Jan-2000' AND '31-Dec-2001' 
ORDER BY "PUBLICATION YEAR", B.BOOK_RETAIL DESC;

-- QUESTION D

COLUMN PUB_ID FORMAT A12 HEADING "PUBLISHER ID";
COLUMN PUB_NAME HEADING "PUBLISHER NAME";
COLUMN PUB_CONTACT FORMAT A17 HEADING "PUBLISHER CONTACT";
COLUMN PUB_PHONE FORMAT A15 HEADING "PUBLISHER PHONE";

SELECT P.PUB_ID,
    P.PUB_NAME,
    P.PUB_CONTACT,
    P.PUB_PHONE,
    COUNT(B.BOOK_TITLE) AS "BOOKS PUBLISHED"
FROM PUBLISHER P JOIN BOOK B
ON P.PUB_ID = B.BOOK_PUBID
GROUP BY P.PUB_ID, 
    P.PUB_NAME,
    P.PUB_CONTACT,
    P.PUB_PHONE
ORDER BY "BOOKS PUBLISHED" DESC;


-- QUESTION E

COLUMN PUB_ID FORMAT A12 HEADING "PUBLISHER ID";
COLUMN PUB_NAME HEADING "PUBLISHER NAME";
COLUMN PUB_CONTACT FORMAT A17 HEADING "PUBLISHER CONTACT";
COLUMN PUB_PHONE FORMAT A15 HEADING "PUBLISHER PHONE";

SELECT P.PUB_ID,
    P.PUB_NAME,
    P.PUB_CONTACT,
    P.PUB_PHONE,
    COUNT(B.BOOK_TITLE) AS "BOOKS PUBLISHED"
FROM PUBLISHER P JOIN BOOK B
ON P.PUB_ID = B.BOOK_PUBID
GROUP BY P.PUB_ID, 
    P.PUB_NAME,
    P.PUB_CONTACT,
    P.PUB_PHONE
HAVING COUNT(B.BOOK_TITLE) =
    (SELECT MAX(PUBLISHCOUNT) 
        FROM (SELECT COUNT(B.BOOK_TITLE) AS PUBLISHCOUNT FROM PUBLISHER P 
        JOIN BOOK B ON P.PUB_ID = B.BOOK_PUBID
            GROUP BY PUB_ID,
             P.PUB_NAME,
             P.PUB_CONTACT,
             P.PUB_PHONE))
ORDER BY P.PUB_NAME;

-- QUESTION F

COLUMN FULL_NAME FORMAT A20 HEADING "CUSTOMER NAME";
COLUMN FULL_ADDRESS FORMAT A40 HEADING "CUSTOMER ADDRESS";

SELECT C.CUST_FNAME || ', ' || C.CUST_LNAME AS "FULL_NAME",
    C.CUST_ADDRESS || ', ' || C.CUST_CITY || ', ' || C.CUST_STATE || ', ' || C.CUST_ZIP AS "FULL_ADDRESS",
    SUM(BOI.BOI_QTY) AS "ORDER QUANTITY"
FROM CUSTOMER C JOIN BOOKORDER BO 
ON C.CUST_NUM = BO.BO_CUSTNUM
JOIN BOOKORDERITEM BOI ON BO.BO_ORDERNUM = BOI.BOI_ORDERNUM
GROUP BY C.CUST_FNAME || ', ' || C.CUST_LNAME,
    C.CUST_ADDRESS || ', ' || C.CUST_CITY || ', ' || C.CUST_STATE || ', ' || C.CUST_ZIP
HAVING SUM(BOI.BOI_QTY) = 
    (SELECT MAX(TOTAL_ORDERED)
        FROM (SELECT SUM(BOI.BOI_QTY) AS TOTAL_ORDERED
        FROM CUSTOMER C JOIN BOOKORDER BO 
        ON C.CUST_NUM = BO.BO_CUSTNUM
        JOIN BOOKORDERITEM BOI ON BO.BO_ORDERNUM = BOI.BOI_ORDERNUM
        GROUP BY C.CUST_FNAME || ', ' || C.CUST_LNAME,
            C.CUST_ADDRESS || ', ' || C.CUST_CITY || ', ' || C.CUST_STATE || ', ' || C.CUST_ZIP))
ORDER BY "FULL_NAME";

-- QUESTION G

COLUMN CUST_NUM FORMAT A15 HEADING "CUSTOMER NUMBER";
COLUMN FULL_NAME FORMAT A20 HEADING "CUSTOMER NAME"

SELECT C.CUST_NUM, 
    C.CUST_FNAME || ', ' || C.CUST_LNAME AS "FULL_NAME",
    COUNT(R.CUST_REFERRED) AS "NUMBER REFERALS"
FROM CUSTOMER C, CUSTOMER R
WHERE C.CUST_NUM = R.CUST_REFERRED
GROUP BY C.CUST_NUM, 
    C.CUST_FNAME || ', ' || C.CUST_LNAME
HAVING COUNT(R.CUST_REFERRED) = 
    (SELECT MAX(REFERALS)
        FROM (SELECT COUNT(R.CUST_REFERRED) AS REFERALS FROM CUSTOMER C, CUSTOMER R
        WHERE C.CUST_NUM = R.CUST_REFERRED
        GROUP BY C.CUST_NUM, 
            C.CUST_FNAME || ', ' || C.CUST_LNAME));

-- QUESTION H

COLUMN BA_ISBN FORMAT A11 HEADING"AUTHOR ISBN";
COLUMN BOOK_TITLE FORMAT A35 HEADING "BOOK TITLE";

SELECT BA.BA_ISBN,
    B.BOOK_TITLE,
    COUNT(BA.BA_AUTHORID) AS "NUMBER AUTHORS"
FROM BOOKAUTHOR BA JOIN BOOK B
ON BA.BA_ISBN = B.BOOK_ISBN
GROUP BY BA.BA_ISBN,
    B.BOOK_TITLE
HAVING COUNT(BA.BA_AUTHORID) > 1
ORDER BY B.BOOK_TITLE;


-- SECTION B
-- QUESTION I
-- STATMENT
CREATE TRIGGER RETURN_BUYER_DISCOUNT
AFTER INSERT OR UPDATE OF BO_CUSTNUM
ON BOOKORDER
DECLARE 
    DISCOUNT NUMBER(3, 2) := 0.10;
BEGIN
    UPDATE BOOKORDER
    SET BO_DISCOUNT = DISCOUNT
    WHERE BO_CUSTNUM IN 
        (SELECT BO_CUSTNUM FROM 
            (SELECT BO_CUSTNUM, 
            COUNT(*) AS C
            FROM BOOKORDER
            GROUP BY BO_CUSTNUM
            HAVING COUNT(*) > 1
            )
        );
END;

-- ROW
CREATE OR REPLACE TRIGGER NO_SHIP_STATE
BEFORE INSERT OR UPDATE OF BO_SHIPSTATE
ON BOOKORDER
FOR EACH ROW
DECLARE 
    NO_SHIP_HI_EXCEPTION EXCEPTION;
    NO_SHIP_AK_EXCEPTION EXCEPTION;
BEGIN 
    IF (:NEW.BO_SHIPSTATE = 'HI') THEN
        DBMS_OUTPUT.PUT_LINE('NO SHIP HI');
        RAISE NO_SHIP_HI_EXCEPTION;
    ELSIF (:NEW.BO_SHIPSTATE = 'AK') THEN
        DBMS_OUTPUT.PUT_LINE('NO SHIP AK');
        RAISE NO_SHIP_AK_EXCEPTION;
    END IF;

EXCEPTION 

WHEN NO_SHIP_HI_EXCEPTION THEN
    RAISE_APPLICATION_ERROR(-20001, 'Sorry, we cannot ship to Hawaii');

WHEN NO_SHIP_AK_EXCEPTION THEN
    RAISE_APPLICATION_ERROR(-20002, 'Sorry, we cannot ship to Alaska');
    
END;

-- QUESTION J
CREATE OR REPLACE PROCEDURE INSERT_NEW_BOOK
(BOOK_ISBN IN VARCHAR2,
BOOK_TITLE IN VARCHAR2,
BOOK_PUBDATE IN DATE,
BOOK_PUBID IN NUMBER,
BOOK_COST IN NUMBER,
BOOK_CATEGORY IN VARCHAR2
)
IS
AVERAGE_COST_PERCENT NUMBER(5, 2);
BOOK_RETAIL NUMBER(5, 2);
BEGIN
 
    SELECT (AVG(BOOK_COST) * 0.075)
    INTO AVERAGE_COST_PERCENT FROM BOOK; 
    
    BOOK_RETAIL := BOOK_COST + (BOOK_COST * 0.125) + (AVERAGE_COST_PERCENT);

    INSERT INTO BOOK VALUES(BOOK_ISBN, BOOK_TITLE, BOOK_PUBDATE, BOOK_PUBID, BOOK_COST, BOOK_RETAIL, BOOK_CATEGORY);
    
    COMMIT;

END;

-- QUESTION K
CREATE OR REPLACE TRIGGER AUTHOR_LIMIT
BEFORE INSERT OR UPDATE OF BA_ISBN ON BOOKAUTHOR
FOR EACH ROW
DECLARE 
    AUTHOR_MAX_EXCEPTION EXCEPTION;
    AUTHOR_COUNT NUMBER;
BEGIN 
    SELECT COUNT(BA_ISBN)
    INTO AUTHOR_COUNT  
    FROM (SELECT BA_AUTHORID,
    BA_ISBN,
    BOOK_CATEGORY
    FROM BOOK JOIN BOOKAUTHOR
    ON BOOK_ISBN = BA_ISBN
    WHERE BOOK_CATEGORY = 'FITNESS' AND BOOK_ISBN = BA_ISBN);
    
    IF ( AUTHOR_COUNT > 2) THEN
    
    RAISE AUTHOR_MAX_EXCEPTION;
    END IF;

EXCEPTION 

WHEN AUTHOR_MAX_EXCEPTION THEN
    RAISE_APPLICATION_ERROR(-20003, 'No more than three authors can be associated with book under FITNESS category');
    
END;

-- QUESTION L
SET SERVEROUTPUT ON;

DECLARE CURSOR CHILD_CURSOR IS 
SELECT BOOK_TITLE, PUB_NAME
    FROM
    (SELECT BOOK_TITLE, PUB_NAME
    FROM BOOK JOIN PUBLISHER
    ON BOOK_PUBID = PUB_ID
    WHERE BOOK_CATEGORY = 'CHILDREN');
    CHILD_CURSOR_DETAILS CHILD_CURSOR%ROWTYPE;
BEGIN 
    OPEN CHILD_CURSOR;
    LOOP
    FETCH CHILD_CURSOR INTO CHILD_CURSOR_DETAILS;
    EXIT WHEN CHILD_CURSOR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(CHILD_CURSOR_DETAILS.BOOK_TITLE || ' -- ' || CHILD_CURSOR_DETAILS.PUB_NAME);
    END LOOP;
    EXCEPTION
    WHEN OTHERS
    THEN
    IF CHILD_CURSOR%ISOPEN 
    THEN CLOSE CHILD_CURSOR; 
    END IF;
END;


-- QUESTION M
CREATE OR REPLACE FUNCTION FORMAT_PRICE
    (PRICE VARCHAR2)
    RETURN VARCHAR2
    IS
BEGIN        
    RETURN (TO_CHAR(PRICE, '$99,999.00'));
END;

-- SECTION C
-- QUESTION N
var myQuery = 
    from b in Books
    where b.BookCost >= 15
    select b;

myQuery.Dump();

 -- QUESTION O
 var myQuery = 
    from b in Books
    where b.BookTitle.Contains("COOK") 
    select b;

myQuery.Dump();

-- QUESTION P
var myQuery = 
    from b in Books join p in Publishers
    on b.BookPubid equals p.PubID
    select new {b.BookCategory, b.BookTitle, p.PubName};
    
myQuery.Dump();

-- QUESTION Q
var myQuery = 
    from b in Books join p in Publishers
    on b.BookPubid equals p.PubID
    group b.BookPubid by p.PubName into g 
    orderby g.Key
    select new
    {
    PubName = g.Key,
    TotalBooks = g.Count()
    };

myQuery.Dump();

--QUESTION R
var myQuery =
    from b in Books
    group b.BookIsbn by b.BookCategory into g
    orderby g.Key descending
    select new 
    {
    Catergory = g.Key,
    CatergoryCount = g.Count() 
    };
    
myQuery.Dump();


--SECTION D
var map = function() {
var key = this.gender;
var value = this.cash;
emit(key, {count: value});
};

var reduce = function(key, values) {
    var sum = 0;

    values.forEach(function(value) {
        sum += value;
        });

    return sum;
};

db.hobbits.mapReduce(map, reduce, {out: "hobbits_stats"});

db.hobbits_stats.find();

