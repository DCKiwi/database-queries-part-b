-- SECTION B
-- QUESTION I
-- STATMENT
CREATE TRIGGER RETURN_BUYER_DISCOUNT
AFTER INSERT OR UPDATE OF BO_CUSTNUM
ON BOOKORDER
DECLARE 
    DISCOUNT NUMBER(3, 2) := 0.10;
BEGIN
    UPDATE BOOKORDER
    SET BO_DISCOUNT = DISCOUNT
    WHERE BO_CUSTNUM IN 
        (SELECT BO_CUSTNUM FROM 
            (SELECT BO_CUSTNUM, 
            COUNT(*) AS C
            FROM BOOKORDER
            GROUP BY BO_CUSTNUM
            HAVING COUNT(*) > 1
            )
        );
END;

-- ROW
CREATE OR REPLACE TRIGGER NO_SHIP_STATE
BEFORE INSERT OR UPDATE OF BO_SHIPSTATE
ON BOOKORDER
FOR EACH ROW
DECLARE 
    NO_SHIP_HI_EXCEPTION EXCEPTION;
    NO_SHIP_AK_EXCEPTION EXCEPTION;
BEGIN 
    IF (:NEW.BO_SHIPSTATE = 'HI') THEN
        DBMS_OUTPUT.PUT_LINE('NO SHIP HI');
        RAISE NO_SHIP_HI_EXCEPTION;
    ELSIF (:NEW.BO_SHIPSTATE = 'AK') THEN
        DBMS_OUTPUT.PUT_LINE('NO SHIP AK');
        RAISE NO_SHIP_AK_EXCEPTION;
    END IF;

EXCEPTION 

WHEN NO_SHIP_HI_EXCEPTION THEN
    RAISE_APPLICATION_ERROR(-20001, 'Sorry, we cannot ship to Hawaii');

WHEN NO_SHIP_AK_EXCEPTION THEN
    RAISE_APPLICATION_ERROR(-20002, 'Sorry, we cannot ship to Alaska');
    
END;

-- QUESTION J
CREATE OR REPLACE PROCEDURE INSERT_NEW_BOOK
(BOOK_ISBN IN VARCHAR2,
BOOK_TITLE IN VARCHAR2,
BOOK_PUBDATE IN DATE,
BOOK_PUBID IN NUMBER,
BOOK_COST IN NUMBER,
BOOK_CATEGORY IN VARCHAR2
)
IS
AVERAGE_COST_PERCENT NUMBER(5, 2);
BOOK_RETAIL NUMBER(5, 2);
BEGIN
 
    SELECT (AVG(BOOK_COST) * 0.075)
    INTO AVERAGE_COST_PERCENT FROM BOOK; 
    
    BOOK_RETAIL := BOOK_COST + (BOOK_COST * 0.125) + (AVERAGE_COST_PERCENT);

    INSERT INTO BOOK VALUES(BOOK_ISBN, BOOK_TITLE, BOOK_PUBDATE, BOOK_PUBID, BOOK_COST, BOOK_RETAIL, BOOK_CATEGORY);
    
    COMMIT;

END;

-- QUESTION K
CREATE OR REPLACE TRIGGER AUTHOR_LIMIT
BEFORE INSERT OR UPDATE OF BA_ISBN ON BOOKAUTHOR
FOR EACH ROW
DECLARE 
    AUTHOR_MAX_EXCEPTION EXCEPTION;
    AUTHOR_COUNT NUMBER;
BEGIN 
    SELECT COUNT(BA_ISBN)
    INTO AUTHOR_COUNT  
    FROM (SELECT BA_AUTHORID,
    BA_ISBN,
    BOOK_CATEGORY
    FROM BOOK JOIN BOOKAUTHOR
    ON BOOK_ISBN = BA_ISBN
    WHERE BOOK_CATEGORY = 'FITNESS' AND BOOK_ISBN = BA_ISBN);
    
    IF ( AUTHOR_COUNT > 2) THEN
    
    RAISE AUTHOR_MAX_EXCEPTION;
    END IF;

EXCEPTION 

WHEN AUTHOR_MAX_EXCEPTION THEN
    RAISE_APPLICATION_ERROR(-20003, 'No more than three authors can be associated with book under FITNESS category');
    
END;

-- QUESTION L
SET SERVEROUTPUT ON;

DECLARE CURSOR CHILD_CURSOR IS 
SELECT BOOK_TITLE, PUB_NAME
    FROM
    (SELECT BOOK_TITLE, PUB_NAME
    FROM BOOK JOIN PUBLISHER
    ON BOOK_PUBID = PUB_ID
    WHERE BOOK_CATEGORY = 'CHILDREN');
    CHILD_CURSOR_DETAILS CHILD_CURSOR%ROWTYPE;
BEGIN 
    OPEN CHILD_CURSOR;
    LOOP
    FETCH CHILD_CURSOR INTO CHILD_CURSOR_DETAILS;
    EXIT WHEN CHILD_CURSOR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(CHILD_CURSOR_DETAILS.BOOK_TITLE || ' -- ' || CHILD_CURSOR_DETAILS.PUB_NAME);
    END LOOP;
    EXCEPTION
    WHEN OTHERS
    THEN
    IF CHILD_CURSOR%ISOPEN 
    THEN CLOSE CHILD_CURSOR; 
    END IF;
END;


-- QUESTION M
CREATE OR REPLACE FUNCTION FORMAT_PRICE
    (PRICE VARCHAR2)
    RETURN VARCHAR2
    IS
BEGIN        
    RETURN (TO_CHAR(PRICE, '$99,999.00'));
END;
